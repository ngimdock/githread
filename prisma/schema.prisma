// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Next auth

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  username String 
  bio String ?
  
  accounts      Account[]
  sessions      Session[]

  followers Follow[] @relation("follower")
  followeds Follow[] @relation("followed")
  posts Post[]
  likes Like[]

  createdAt DateTime @default(now())
}

model Follow {
  id            String    @id @default(cuid())

  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  followed User @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)
  followedId String

  createdAt DateTime @default(now())
}

model Post {
  id            String    @id @default(cuid())
  content String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  parent Post ? @relation("comments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String ?

  replies Post[] @relation("comments")
  likes Like[]
  
  createdAt DateTime @default(now())
}

model Like  {
  id            String    @id @default(cuid())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post Post @relation( fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
}